##############################
#            Key             #
##############################

=   instance attribute
==  class attribute
+   public method
-   private method
++  static method
<:  inheretence
:   type

#Notes:
#need someway of scripting "cut scenes"
  #character says
  #character moves
  #give/take/drop items

##############################
#          Lua API           #
##############################

Plot[var] = plot variables
Event constructors
Event handlers?


##############################
#         Scripting          #
##############################

#A lua expression that evalutes to a boolean
Condition
  =lua : string
  +allows() : boolean

#a lua function that returns true depending on what is passed to it
SpecificCondition<T>
  ==AlwaysAllow
  ==AlwaysDeny
  =lua_function : string ?
  +(string lua)
  +allowedFor(T t*) : bool

GuardedObject
  =condition : Condition
  +isAllowed() : boolean

GuardedList<T <: GuardedObject>
  =cobjects : list<T>
  +size() : int
  +getFirst() : T #could be nice to also alias this to the () or * operator
  +getAll() : set<T> # gets all the ones whose guards permit
  +add(t : T) : void
  +add(t : T, int pos) : void
  +remove(t : T) : void

#IDEA have the resource associated with each event
#then things can subscribe to events associated with specific resources
#so a quest might subscribe to the event
#"NPC/Quest/Lost_Dog/doggy.npc", "death"
#that way it's easy for there to be a standard set of events that happen
#and also support random ass events in mods that get ignored by main game logic :D
EventManager
  =map<Path,map<GenericEvent*,EventHandler*>
  ++() #singleton
  ++destroy() #destroys this instance of the event manager
  ==EventManager instance;
  +subscribe(EventHandler*,Path,GenericEvent*)
  +unsubscribe(EventHandler*) #unsubscribes from all events
  +raise(Path,GenericEvent*)

GenericEvent
  +equals(GenericEvent) : bool

DeathEvent
  +equals(GenericEvent) : bool

#..all other events

#can be used in modding
StringEvent <: GenericEvent
  =event : string
  +(String event)

EventHandler
  +handleEvent(ResourcePath raiser, Generic event)

EventRaiser
  -raiserName() : name
  +sendEvent(GenericEvent event)


##############################
#            Plot            #
##############################

#it seems reasonable that many conditions will need to know about active quests
#therefore there needs to be a nice api for querying them
#easiest that I can think of at the moment is to have each quest as a separate resource
#then Quests can be refered to uniquely by resource pathes
#a Quest tree might contain something like
#Quest/Lost_Dog/root.qst
#Quest/Lost_Dog/Found/root.qst
#Quest/Lost_Dog/Killed/root.qst
Quest <: Resource
  =name : string
  =description : string

PlotVariable
  =name : string
  =string_value : string
  =int_value : int
  +get<T>() : T
  +set<T>(T v) : void
  ++getVariable(name : string) : PlotVariable
  ==map<string,PlotVariable>

#you may want to get rid of metalogues and just have nps have a guardedlist of Dialogues
#you can get the same effects, but it does away with explicit transitions between metalogues
Metalogue
  =root
  =current : MegalogueNode
  +getDialogue() : DialogueNode

MetalogueNode <: GuardedObject
  =name : string
  =children : GuardedList<MetalogueNode>
  =dialogue : DialogueNode

Dialogue <: GuardedList<DialogueNode>, Resource
  +loadFromBuffer

DialogueNode <: GuardedObject
  =metalogue : MetalogueNode
  =name : string
  =option : string # what the player says, blank for root node
  =response : string # what the npc responds
  =children : GuardedList<DialogueNode>
  =event : GenericEvent # should be raised by the npc doing the talking
  +options() : list<pair<string,DialogueNode>>
  +visit() : void
  

##############################
#           Game             #
##############################

#contains the main loop, manages timing
#possibly also handles passing inut and graphics contexes
Game
  =states : stack<GameState>
  +pushState(GameState) : void
  +popState() : void
  +run() : void

#things like menu's, playing, paused etc
GameState
  +step()

#manages a game world, etc
World <: SavableObject
  =resources : ResourceManager
  =save : SaveProvider
  =currentMap
  =party : list<Player>
  +setSave(SaveProvider save) : void
  +saveGame() : void
  +loadGame() : void

Die
  ==dN : map<int,Die>
  ++(int n) #Die are singletons
  =n : int
  +(int n)
  +roll(int n) #roll n Die's
  +roll()
  + +(Die) # constructs a diceroll

DiceRoll
  =list<pair<int,Die>>
  + +(Die) #appends a die to the list
  +roll()

#an object that can save it's state
SavableObject
#another idea is to make it load from xml_node
#that way you can store the entire save in an xml and file
#parse it once, and pass the relevant bits to the things that need to be loaded
  ++loadFromBuffer(char* c)
  ++loadFromXmlNode(xml_node<>* node)
  +saveToString() : string


##############################
#         Character          #
##############################

#can also be used as a differential for change in alignments present with various quests
Alignment <: SavableObject
  =lawfulness : int
  =morality : int # negative is evil, positive is good
  +toString #writes as string representation

Attributes <: SavableObject
  #enum of attributes
  attributeName(attribute) : string
  get(attribute) : string
  addModifier(modifier) : void
  removeModifier(modifier) : void
  updateModifiers()

Modifier <: SavableObject
  =attribute : ?
  =amount : int
  =expires : int
  =uses : int
  =description : string # so the player can see a break down of their stats
  +amount() : int
  +attribute() : attribute
  +amountFor(attribute) : int

#Allow Tiles to have Modifiers as well
#that would cover area effects
#Make attributes query the current tile when calculating the final number for any attribute

ALSO
Levels??!?!?

Character <: SavableObject
  =name : string
  =attributes : ?
  =hp : int
  =mp : int
  =inventory : list<Item>
  =gfx_archtype : ?
  =facing : Tile
  =alignment : Alignment
  =equipped : Item
  +step() : void
  +doMelee() : void
  +doRanged(attack,target) : void
  +doSpell(spell,target) : void
  +takeDamage(int dmg) : void
  +useMana(int mana) : void
  +addHP(int amt) : void
  +addMP(int amt) : void

Player <: Character
  +step() : void

NPC <: Character
  =metalogue : Metalogue
  +step() : void

Item <: Resource
  =name : string
  =description : string
  =wieldable : bool
  =wearable : bool
  =sellPrice : int
  =buyPrice : int
  =meleeDamage : DiceRoll
  +canWield() : bool
  +canWear() : bool

Spell <: Resource
  =name : string
  =description : string
  =effect : string
  +getName() : string
  +getDescription() : string
  +cast(character caster, tile target) : int #returns mana drained

#Q: How do you want to handle levels/classes/races?
#A: Maybe have a subclass of modifier for levels, that gets updated when you level up.
#Class class contains an array for each level, each array contains a modifier.
#Modifiers can modify anything in Attributes.
#Attributes contain more than just strength, ac, etc. Should also account for:
#-skill points to spend
#-allowed feats
#-basically anything modifiable
#Feats and "usable" Skills can both be implemented as an Action class
#in game, present available Actions to the user as Feats. Add skill Action at creation time.
#When saving classes level and races, just the path should be saved, and current level.
#that way any modifications made to the resources is reflected in the character
#likewise for items


#Q: How do you want to handle display and input?
#I'd like display and input to be as separated from the game logic as possible.
#A: Have a generic 
#TextView class that manages a 2d array of characters and colors, provides an api for input
#Abstract Renderer and Input classes. That way you can write an ncurses renderer/input and 
#one for sfml as well without reinventing the gui wheel for both.

#Q:
#Spells that create things?
#Spells that have saves
#Spells that have running saves to ignore
#Modifiers against specific things
#A: Don't handle every last type of spell. Have a flexible modifier/attribute system
#that can have use and/or time limits. Have tiles hold modifiers as well. The Lua function
#will be given a tile. Supply them with helper fucntions to facilitate turning that into a
#list of tiles, single object/character, etc. This covers timed/num/instant uses touch, ranged,
#and area affects. That should be plenty.

#Q: How do you save the current state of the map
#Meaning:
#npc's on the map, what they are holding, what if they are dead, etc
#randomly spawned enemies
#dropped item's etc
#A: Separate the map and it's contents. A map contents class will manage
#the contents of th world, items, npc's etc. If it is a subclass of SavableObject
#it is trivial to extend it to be a Resource. Therefore have there be an
#'initial contents' file along with the map that is only loaded while creating
#the world for the first time. Every other time it will be loaded from the save file.


#Doors?

##############################
#            Map             #
##############################

Map <: GuardedObject, Resource, SavableObject #the save to xml will only save 
  =tiles : ?<Tile>
  =npcs : list<NPC>
  =items : items
  =parent : Map*

Tile <: Resource
  =onWalkEvent : TileEvent #when a player walks on this tile
  =gfx_archtype : ?
  =occupant : Character
  =items : list<item>
  =walkable : bool
  =map : Map
  +subMaps : GuardedList<Map>
  +removeOccupant() : void
  +placeOccupant(Character char) : bool # returns false if not possible
  +tileInDirection(Direction)

#For walking Animations, the character will appear in both tiles at the same time until the animation finishes


##############################
#         Resources          #
##############################

ResourceException <: GenericException #generic Exception will probably just be typedef'ed to exception
  +(string)

NoSuchPathException : ResourceException
  +(ResourcePath)

ResourceManager
  =providers : list<ResourceProvider> #most recent providers take precidence over older ones, allows for partial mods to bed added
  ==resourceMap : map<int,static Resource class?>
  +addProvider(ResourceProvider) : void
#manages caching resources, returns a copy constructed instance of the object
  +loadResource(string name) : Resource *
#maintain a worker thread that loads resources in the background
  +preloadResource(string name) : void

ResourceProvider
  +provides(string name) : bool
  +getBuffer(ResourcePath) : const unsigned char *
  +putBuffer(ResourcePath, buffer)

ResourcePath
  ==Any : ResourcePath # matches any children, like a glob *
  +(string path)
  +splt() : list<string>
  +dir() : ResourcePath
  +up() : ResourcePath
  +down(string path) : ResourcePath
  +matches(ResourcePath path) : bool

DirectoryProvider <: ResourceProvider
  +(string directory, bool recursive)

SaveProvider 

Resource
  =magicnumber : int
  -setManager(ResourceManager manager) : void
  +resourceName() : string # the path that resulted in this object
  +loadResource(string name) : Resource  # loads a resource from the manager that loaded this resource
  ++loadFromBuffer(string buffer) : Resource
  ++saveToBuffer() : string
